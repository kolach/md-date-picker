(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/md-date-picker.js":[function(require,module,exports){
"use strict";

var _interopRequire = function _interopRequire(obj) {
  return obj && obj.__esModule ? obj["default"] : obj;
};

require("../tmp/templates");

var MdCalendarMonthDirective = _interopRequire(require("./calendar-month"));

angular.module("ngDatePicker", ["ngAnimate", "ngAria", "ngMaterial", "angularMoment", "templates"]).directive("mdCalendarMonth", MdCalendarMonthDirective.create);

},{"../tmp/templates":"/Users/nick/Projects/md-date-picker/tmp/templates.js","./calendar-month":"/Users/nick/Projects/md-date-picker/src/calendar-month.js"}],"/Users/nick/Projects/md-date-picker/src/calendar-month.js":[function(require,module,exports){
"use strict";

var _interopRequire = function _interopRequire(obj) {
	return obj && obj.__esModule ? obj["default"] : obj;
};

var _createClass = (function () {
	function defineProperties(target, props) {
		for (var key in props) {
			var prop = props[key];prop.configurable = true;if (prop.value) prop.writable = true;
		}Object.defineProperties(target, props);
	}return function (Constructor, protoProps, staticProps) {
		if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	};
})();

var _classCallCheck = function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
};

var DateUtils = _interopRequire(require("./date-utils"));

// Calendar month class

var MdCalendarMonthDirective = (function () {
	function MdCalendarMonthDirective($mdTheming) {
		_classCallCheck(this, MdCalendarMonthDirective);

		this.$mdTheming = $mdTheming;
		this.templateUrl = "src/calendar-month.html";
		this.restrict = "E";

		this.scope = {
			date: "=ngModel",
			min: "@",
			max: "@",
			month: "@",
			year: "@",
			startingDay: "@"
		};

		this.bindToController = true;
		this.controllerAs = "ctrl";
		this.link = this.link.bind(this);
	}

	_createClass(MdCalendarMonthDirective, {
		link: {
			value: function link(scope, element, attrs) {
				console.log("Link function was called");
				this.$mdTheming(element);
			}
		},
		controller: {

			/*@ngInject*/

			value: ["moment", function controller(moment) {

				var ctrl = this;

				ctrl.date = ctrl.date || new Date();
				ctrl.month = ctrl.month || ctrl.date.getMonth();
				ctrl.months = moment.months();
				ctrl.minDate = parseDate(ctrl.min);
				ctrl.maxDate = parseDate(ctrl.max);
				ctrl.year = ctrl.year || ctrl.date.getFullYear();
				ctrl.years = DateUtils.yearsRange(ctrl.minDate, ctrl.maxDate);

				ctrl.startingDay = ctrl.startingDay || 1;
				ctrl.weekdays = moment.weekdaysMin();
				if (ctrl.startingDay) {
					ctrl.weekdays.push(ctrl.weekdays.shift());
				}

				ctrl.prev = prev;
				ctrl.next = next;
				ctrl.select = select;
				ctrl.refresh = refresh;

				ctrl.refresh();

				function parseDate(d) {
					return d ? moment(d, ["YYYY"]).toDate() : null;
				}

				function prev() {
					var date = new Date(ctrl.year, ctrl.month, 15);
					moveToDate(moment(date).subtract(1, "months").toDate());
				}

				function next() {
					var date = new Date(ctrl.year, ctrl.month, 15);
					moveToDate(moment(date).add(1, "months").toDate());
				}

				function moveToDate(date) {
					ctrl.year = date.getFullYear();
					ctrl.month = date.getMonth();
					ctrl.refresh();
				}

				function refresh() {
					console.log(ctrl.year, ctrl.month);

					var firstDayOfMonth = new Date(ctrl.year, ctrl.month, 1);
					var difference = ctrl.startingDay - firstDayOfMonth.getDay();
					var numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference;
					var firstDate = new Date(firstDayOfMonth);

					if (numDisplayedFromPreviousMonth > 0) {
						firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
					}

					// 42 is the number of days on a six-month calendar
					var days = DateUtils.getDates(firstDate, 42);
					var today = new Date();
					for (var i = 0; i < 42; i++) {
						var day = days[i];
						days[i] = {
							date: day,
							label: moment(day).format("DD"),
							classes: {
								"md-date-picker-calendar-month-day-selected": DateUtils.equal(ctrl.date, day),
								"md-date-picker-calendar-month-day-today": DateUtils.equal(today, day),
								"md-date-picker-calendar-month-day-muted": day.getMonth() !== ctrl.month
							}
						};
					}

					ctrl.rows = DateUtils.split(days, 7);
				}

				function select(date) {
					ctrl.date = date;
					ctrl.month = date.getMonth();
					ctrl.year = date.getFullYear();
					ctrl.refresh();
				}
			}]
		}
	}, {
		create: {

			/*@ngInject*/

			value: ["$mdTheming", function create($mdTheming) {
				return new MdCalendarMonthDirective($mdTheming);
			}]
		}
	});

	return MdCalendarMonthDirective;
})();

module.exports = MdCalendarMonthDirective;

},{"./date-utils":"/Users/nick/Projects/md-date-picker/src/date-utils.js"}],"/Users/nick/Projects/md-date-picker/src/date-utils.js":[function(require,module,exports){
"use strict";

var _createClass = (function () {
	function defineProperties(target, props) {
		for (var key in props) {
			var prop = props[key];prop.configurable = true;if (prop.value) prop.writable = true;
		}Object.defineProperties(target, props);
	}return function (Constructor, protoProps, staticProps) {
		if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	};
})();

var _classCallCheck = function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
};

var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

var DateUtils = (function () {
	function DateUtils() {
		_classCallCheck(this, DateUtils);
	}

	_createClass(DateUtils, null, {
		getDaysInMonth: {
			value: function getDaysInMonth(year, month) {
				return month === 1 && year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
			}
		},
		getDates: {
			value: function getDates(startDate, n) {
				var dates = new Array(n);
				var current = new Date(startDate);
				var i = 0;
				current.setHours(12); // Prevent repeated dates because of timezone bug
				while (i < n) {
					dates[i++] = new Date(current);
					current.setDate(current.getDate() + 1);
				}
				return dates;
			}
		},
		asDate: {
			value: function asDate(d) {
				return new Date(d.getFullYear(), d.getMonth(), d.getDate());
			}
		},
		compare: {
			value: function compare(d1, d2) {
				return DateUtils.asDate(d1) - DateUtils.asDate(d2);
			}
		},
		equal: {
			value: function equal(d1, d2) {
				if (d1 && d2) {
					return DateUtils.compare(d1, d2) === 0;
				} else {
					return d1 === d2;
				}
			}
		},
		split: {

			// Split array into smaller arrays

			value: function split(arr, size) {
				var arrays = [];
				while (arr.length > 0) {
					arrays.push(arr.splice(0, size));
				}
				return arrays;
			}
		},
		yearsRange: {
			value: function yearsRange(d1, d2) {
				var minYear = d1 ? d1.getFullYear() : 1970;
				var maxYear = d2 ? d2.getFullYear() : new Date().getFullYear();
				var result = [];
				for (var y = minYear; y <= maxYear; ++y) {
					result.push(y);
				}
				return result;
			}
		}
	});

	return DateUtils;
})();

module.exports = DateUtils;

},{}],"/Users/nick/Projects/md-date-picker/tmp/templates.js":[function(require,module,exports){
"use strict";

(function (module) {
  try {
    module = angular.module("templates");
  } catch (err) {
    module = angular.module("templates", []);
  }
  module.run(["$templateCache", function ($templateCache) {
    "use strict";
    $templateCache.put("src/calendar-month.html", "<div layout=\"column\" class=\"md-date-picker-calendar-month\">\n" + "\n" + "    <div layout=\"row\" layout-align=\"space-between center\" class=\"md-date-picker-calendar-month-controls\">\n" + "        <md-button ng-click=\"ctrl.prev()\" aria-label=\"prev\">\n" + "            <md-icon md-svg-src=\"prev-month\"></md-icon>\n" + "        </md-button>\n" + "        <div flex></div>\n" + "        <div layout=\"row\" layout-align=\"space-between center\" layout-padding>\n" + "            <md-select class=\"md-date-picker-calendar-month-controls-month\" ng-model=\"ctrl.month\" ng-change=\"ctrl.refresh()\">\n" + "                <md-option ng-repeat=\"month in ctrl.months\" ng-selected=\"{{$index === ctrl.month}}\" ng-value=\"$index\">{{month | uppercase}}</md-option>\n" + "            </md-select>\n" + "            <md-select class=\"md-date-picker-calendar-month-controls-year\" ng-model=\"ctrl.year\" ng-change=\"ctrl.refresh()\">\n" + "                <md-option ng-repeat=\"year in ctrl.years\" ng-selected=\"{{year === ctrl.year}}\" ng-value=\"year\">{{year}}</md-option>\n" + "            </md-select>\n" + "        </div>\n" + "        <div flex></div>\n" + "        <md-button ng-click=\"ctrl.next()\" aria-label=\"next\">\n" + "            <md-icon md-svg-src=\"next-month\"></md-icon>\n" + "        </md-button>\n" + "    </div>\n" + "\n" + "    <div layout=\"column\" class=\"md-date-picker-calendar-month-wdays\">\n" + "        <div layout=\"row\" layout-margin>\n" + "            <span flex ng-repeat=\"wday in ctrl.weekdays\" class=\"md-date-picker-calendar-month-wday\">{{wday}}</span>\n" + "        </div>\n" + "        <div class=\"md-date-picker-calendar-month-days\">\n" + "            <div layout=\"row\" layout-margin ng-repeat=\"row in ctrl.rows\">\n" + "                    <span flex ng-click=\"ctrl.select(day.date)\"\n" + "                          class=\"md-date-picker-calendar-month-day\" ng-class=\"day.classes\"\n" + "                          ng-repeat=\"day in row\">{{day.label}}</span>\n" + "            </div>\n" + "        </div>\n" + "    </div>\n" + "\n" + "</div>");
  }]);
})();

},{}]},{},["./src/md-date-picker.js"])
//# sourceMappingURL=data:application/json;base64,
